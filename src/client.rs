use message_io::node::{self, NodeEvent};
use message_io::network::{NetEvent, Transport};

use crate::ident::Identification;

enum Signal {
	Greet,
	Message(String)
}

pub fn main(host: String, name: String) {
	let (handler, listener) = node::split();

	let (server, _) = match handler.network().connect(Transport::FramedTcp, host.clone() + ":9009") {
		Ok(c) => {
			println!("Connecting to {}", host);
			c
		},
		Err(e) => {
			eprintln!("{}", e);
			return;
		}
	};

    let mut ident: Identification = Identification::new(0, name, true);

	listener.for_each(move |event| match event {
        NodeEvent::Network(net_event) => match net_event {
            NetEvent::Connected(_endpoint, _ok) => handler.signals().send(Signal::Greet),
            NetEvent::Accepted(_, _) => unreachable!(), // Only generated by listening
            NetEvent::Message(_endpoint, data) => {
                println!("Received: {}", String::from_utf8_lossy(data));
                if ident.helo {
                    ident.helo = false;
                    ident.id = match u64::from_str_radix(&String::from_utf8_lossy(data), 10) {
                        Ok(id) => id,
                        Err(e) => {
                            eprintln!("Error occurred: {:#?}", e);
                            handler.stop();
                            return
                        },
                    };

                    println!("{}", ident);
                }
            },
            NetEvent::Disconnected(_endpoint) => (),
        }
        NodeEvent::Signal(signal) => match signal {
            Signal::Greet => { // computed every second
                //handler.network().send(server, ident.to_ident_string().as_slice());
                handler.network().send(server, &ident.to_ident_string());
            },
            Signal::Message(a) => {
                let mut data = ident.to_ident_string();
                data.append(&mut (";".to_owned() + &a).into_bytes());
                handler.network().send(server, &data.as_slice());
            }
        }
    });

    
}